version: "2.1"


networks:
  front:
    driver: bridge
  middle:
    driver: bridge
  back:
    driver: bridge


services:

  # Frontend containers
  nginx01:
    image: nginx
    container_name: DCKFRNT01
    ports: 
      - "8080:80"
    networks: 
      - front

  nginx02:
    image: nginx
    container_name: DCKFRNT02
    ports: 
      - "8081:80"
    networks: 
      - front

  nginx03:
    image: nginx
    container_name: DCKFRNT03
    ports: 
      - "8082:80"
    networks: 
      - front

  # Compute (middle) containers
  nginx04:
    image: nginx
    container_name: DCKCMPT01
    ports: 
      - "8083:80"
    networks: 
      - middle 

  traefik:
    image: traefik
    container_name: DCKCMPT02
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "81:80"
      - "8084:8080"
    networks: 
      - middle 

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"

  python01:
    image: python
    container_name: DCKCMPT03
    networks: 
      - middle

  grafana:
    image: grafana/grafana
    container_name: Grafana
    ports:
      - "3000:3000"
    networks:
      - middle
    volumes:
       - /scripts/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
       - /scripts/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
       - /scripts/grafana/docker-container.json:/etc/grafana/provisioning/dashboards/docker-container.json
       - /scripts/grafana/docker-host.json:/etc/grafana/provisioning/dashboards/docker-host.json


  # Data (backend) containers
  prometheus:
    image: prom/prometheus
    container_name: Prometheus
    ports:
     - "9090:9090"
    volumes:
    - /scripts/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - middle
    depends_on:
    - cadvisor

  postgres:
    image: postgres
    container_name: Postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    volumes:
    - /scripts/sql/school.sql:/docker-entrypoint-initdb.d/school.sql
    ports:
      - "5432:5432"
    networks:
      - back

  adminer:
    image: adminer
    container_name: Adminer
    restart: always
    ports:
      - "8085:8080"
    networks:
      - back
  
  node-exporter:
   image: prom/node-exporter
   container_name: Node-exporter
   restart: always
   ports:
    - "9100:9100"
   networks:
     - middle

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: Cadvisor
    ports:
    - "8086:8080"
    networks:
     - middle
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - redis

  redis:
    image: redis:latest
    container_name: Redis
    ports:
    - "6379:6379"
